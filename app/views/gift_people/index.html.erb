<% content_for(:title, "ギフト相手一覧") %>

<!-- メインコンテナ - 中央寄せ -->
<div class="max-w-6xl mx-auto">
<!-- ヘッダー部分 -->
<div class="mb-2 mt-2 text-center">
  <h2 class="text-2xl font-bold text-gray-800 mb-3">
    <i class="fas fa-users mr-2 text-primary"></i>
    ギフト相手一覧
  </h2>
  <div class="flex justify-center">
    <%= link_to new_gift_person_path,
        class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white btn-primary hover:bg-primary-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary" do %>
      <i class="fas fa-plus mr-2"></i>
      新しい相手を追加
    <% end %>
  </div>
</div>

  <!-- 検索・フィルター機能 -->
  <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-2 mb-2 max-w-4xl mx-auto">
    <%= form_with url: gift_people_path, method: :get, local: true, class: "space-y-2" do |f| %>
      <!-- 検索欄と検索ボタン -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
        <!-- 検索キーワード（オートコンプリート付き） -->
        <div class="relative">
          <%= f.label :search, "検索", class: "block text-xs font-medium text-gray-700 mb-0.5" %>
          <%= f.text_field :search, 
              value: h(params[:search]),
              placeholder: "名前、好きなもの、メモで検索",
              id: "search-input",
              autocomplete: "off",
              class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" %>
          
          <!-- オートコンプリートドロップダウン -->
          <div id="autocomplete-dropdown" 
               class="absolute z-50 w-full mt-0.5 bg-white border border-gray-300 rounded-md shadow-lg hidden max-h-48 overflow-y-auto">
            <!-- 検索結果がここに動的に追加される -->
          </div>
          
          <!-- ローディング表示 -->
          <div id="search-loading" 
               class="absolute right-2 top-7 hidden">
            <i class="fas fa-spinner fa-spin text-gray-400 text-sm"></i>
          </div>
        </div>

        <!-- 検索ボタン -->
        <div class="flex items-end">
          <%= f.submit "検索", class: "w-full px-3 py-1.5 btn-primary text-white text-sm font-medium rounded-md hover:bg-primary-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary" %>
        </div>
      </div>

      <!-- フィルターと値 -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
        <!-- フィルタータイプ選択 -->
        <div>
          <%= f.label :filter_type, "フィルター", class: "block text-xs font-medium text-gray-700 mb-0.5" %>
          <%= f.select :filter_type, 
              options_for_select([
                ["選択してください", ""],
                ["関係性", "relationship"],
                ["イベント", "event"]
              ], params[:filter_type]),
              {},
              { 
                id: "people-filter-type-select",
                class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
              } %>
          <%= f.hidden_field :filter_type, id: "people-filter-type-hidden" %>
        </div>

        <!-- 動的フィルター値選択 -->
        <div>
          <%= f.label :filter_value, "値", class: "block text-xs font-medium text-gray-700 mb-0.5" %>
          
          <!-- 関係性選択プルダウン -->
          <%= f.select :relationship_id, 
              options_for_select([["すべて", ""]] + @relationship_options, params[:relationship_id]),
              {},
              { 
                id: "people-relationship-select",
                class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary",
                style: (params[:filter_type] == "relationship" ? "" : "display: none;")
              } %>
          
          <!-- イベント選択プルダウン -->
          <%= f.select :event_id, 
              options_for_select([["すべて", ""]] + @event_options, params[:event_id]),
              {},
              { 
                id: "people-event-select",
                class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary",
                style: (params[:filter_type] == "event" ? "" : "display: none;")
              } %>
          
          <!-- プレースホルダー表示 -->
          <div id="people-filter-placeholder" class="w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm bg-gray-50 text-gray-500" 
               style="<%= params[:filter_type].present? ? 'display: none;' : '' %>">
            左でフィルターを選択してください
          </div>
        </div>
      </div>

      <!-- 並び替え -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-2">
        <!-- 並び替えタイプ -->
        <div>
          <%= f.label :sort_by, "並び替え", class: "block text-xs font-medium text-gray-700 mb-0.5" %>
          <%= f.select :sort_by, 
              options_for_select([
                ["ギフト記録数", "gift_records_count"]
              ], params[:sort_by]),
              { prompt: "選択してください" },
              { 
                class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
              } %>
        </div>

        <!-- 並び順 -->
        <div>
          <%= f.label :sort_order, "順序", class: "block text-xs font-medium text-gray-700 mb-0.5" %>
          <%= f.select :sort_order, 
              options_for_select([
                ["昇順", "asc"],
                ["降順", "desc"]
              ], params[:sort_order]),
              { prompt: "選択してください" },
              { 
                class: "w-full px-2 py-1.5 text-sm border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary" 
              } %>
        </div>
      </div>

      <% if params[:search].present? || params[:relationship_id].present? || params[:event_id].present? || params[:sort_by].present? %>
        <div class="flex items-center justify-between pt-1.5 border-t border-gray-200">
          <span class="text-xs text-gray-600">
            <%= pluralize(@total_people, "件") %>の結果
          </span>
          <%= link_to "クリア", gift_people_path, class: "text-xs text-primary hover:text-primary-hover" %>
        </div>
      <% end %>
    <% end %>
  </div>
  
  <!-- 補助情報 -->
  <div class="text-center text-sm text-gray-600 mb-4 max-w-2xl mx-auto">
    <p>
      <i class="fas fa-info-circle mr-1 text-gray-400"></i>
      ギフト相手を登録しておくと、ギフト記録作成時に選択できるようになります
    </p>
  </div>
  
  <!-- ギフト相手一覧 -->
  <div class="text-center mb-3 mt-1">
    <h3 class="text-base font-medium text-gray-800">
      <i class="fas fa-address-book mr-1 text-primary"></i>
      登録済み相手
      <span class="text-sm text-gray-500 font-normal ml-1">
        （<%= pluralize(@total_people, "人") %>）
      </span>
    </h3>
  </div>

  <% if @gift_people.any? %>
    <!-- カードグリッドレイアウト -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3 md:gap-4 justify-items-center">
      <% @gift_people.each do |person| %>
        <div class="bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300 transform hover:shadow-xl hover:-translate-y-1 cursor-pointer" onclick="window.location.href='<%= gift_person_path(person) %>'">
          <!-- アイコンエリア -->
          <div class="h-32 bg-gradient-to-br from-pink-50 to-purple-50 flex items-center justify-center relative">
            <div class="w-16 h-16 bg-white rounded-full flex items-center justify-center shadow-sm">
              <i class="fas fa-user text-2xl text-primary"></i>
            </div>
          </div>

          <!-- 相手情報 -->
          <div class="p-3">
            <!-- 名前 -->
            <div class="mb-2">
              <h4 class="text-lg font-bold leading-tight text-gray-800">
                <%= person.name %>
              </h4>
            </div>

            <!-- 関係性 -->
            <div class="mb-2">
              <div class="flex items-center text-sm">
                <i class="fas fa-users mr-2 text-indigo-500"></i>
                <span class="text-gray-600">
                  <%= person.relationship&.name || "未設定" %>
                </span>
              </div>
            </div>

            <!-- 誕生日 -->
            <% if person.birthday.present? %>
              <div class="mb-2">
                <div class="flex items-center text-sm">
                  <i class="fas fa-birthday-cake mr-2 text-yellow-500"></i>
                  <span class="text-gray-600">
                    <%= l(person.birthday, format: :short) %>
                    <% age = ((Date.current - person.birthday) / 365.25).to_i %>
                    <% if age > 0 %>
                      <span class="text-xs text-gray-500">(<%= age %>歳)</span>
                    <% end %>
                  </span>
                </div>
              </div>
            <% end %>

            <!-- 好きなもの（短縮表示） -->
            <% if person.likes.present? %>
              <div class="mb-2">
                <div class="flex items-start text-sm">
                  <i class="fas fa-thumbs-up mr-2 text-green-500 mt-0.5"></i>
                  <span class="text-gray-600 flex-1">
                    <%= truncate(person.likes, length: 40) %>
                  </span>
                </div>
              </div>
            <% end %>

            <!-- ギフト記録数 -->
            <% gift_count = current_user.gift_records.where(gift_people_id: person.id).count %>
            <div class="mt-3 pt-2 border-t border-gray-200">
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-500">ギフト記録</span>
                <span class="font-medium text-primary">
                  <%= pluralize(gift_count, "件") %>
                </span>
              </div>
            </div>

            <!-- 最後のギフト記録日 -->
            <% last_gift = current_user.gift_records.where(gift_people_id: person.id).order(gift_at: :desc).first %>
            <% if last_gift %>
              <div class="mt-1">
                <div class="flex items-center justify-between text-xs text-gray-500">
                  <span>最後のギフト</span>
                  <span><%= l(last_gift.gift_at, format: :short) %></span>
                </div>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>
    </div>
  <% else %>
    <!-- 空状態 -->
    <div class="text-center py-8">
      <div class="mx-auto h-24 w-24 text-gray-300">
        <i class="fas fa-users text-6xl"></i>
      </div>
      <h3 class="mt-3 text-lg font-medium text-gray-900">
        ギフト相手が登録されていません
      </h3>
      <p class="mt-2 text-sm text-gray-500 max-w-sm mx-auto">
        <% if params[:search].present? || params[:relationship_id].present? %>
          検索条件に一致する相手が見つかりませんでした。
        <% else %>
          最初のギフト相手を登録して、ギフト記録の管理を始めましょう。
        <% end %>
      </p>
      <div class="mt-4">
        <% if params[:search].present? || params[:relationship_id].present? %>
          <%= link_to gift_people_path,
              class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500 mr-3" do %>
            <i class="fas fa-list mr-2"></i>
            すべて表示
          <% end %>
        <% end %>
        <%= link_to new_gift_person_path,
            class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white btn-primary hover:bg-primary-hover focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary" do %>
          <i class="fas fa-plus mr-2"></i>
          最初の相手を登録
        <% end %>
      </div>
    </div>
  <% end %>
</div>

<!-- メインコンテナ終了 -->
</div>

<script>
// ギフト相手一覧のオートコンプリート機能
(function() {
  let autocompleteInitialized = false;
  let searchTimeout;
  let currentRequest;
  
  function initializeAutocomplete() {
    // 要素の存在確認
    const searchInput = document.getElementById('search-input');
    const dropdown = document.getElementById('autocomplete-dropdown');
    const loading = document.getElementById('search-loading');
    
    // 必要な要素が存在しない場合は何もしない
    if (!searchInput || !dropdown || !loading) {
      return;
    }
    
    // 既に初期化済みの場合はスキップ（data属性で管理）
    if (searchInput.dataset.autocompleteInitialized === 'true') {
      return;
    }
    
    const form = searchInput.closest('form');
    if (!form) return;
    
    // 初期化完了をマーク
    searchInput.dataset.autocompleteInitialized = 'true';
  
  // 検索入力処理
  searchInput.addEventListener('input', function(e) {
    const query = e.target.value.trim();
    
    // リクエストのデバウンス
    clearTimeout(searchTimeout);
    
    if (query.length >= 1) {
      searchTimeout = setTimeout(() => performAutocomplete(query), 300);
    } else {
      hideDropdown();
    }
  });

  // CSRF トークンを取得（utils.jsのグローバル関数を使用）

  // オートコンプリート実行
  function performAutocomplete(query) {
    // 既存のリクエストをキャンセル
    if (currentRequest) {
      currentRequest.abort();
    }

    showLoading();

    currentRequest = new AbortController();
    
    const headers = {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };

    const csrfToken = window.getCSRFToken();
    if (csrfToken) {
      headers['X-CSRF-Token'] = csrfToken;
    }
    
    fetch(`/gift_people/autocomplete?q=${encodeURIComponent(query)}`, {
      signal: currentRequest.signal,
      headers: headers
    })
    .then(response => {
      if (!response.ok) throw new Error('Network response was not ok');
      return response.json();
    })
    .then(data => {
      hideLoading();
      displayResults(data.results);
    })
    .catch(error => {
      if (error.name !== 'AbortError') {
        console.error('Autocomplete error:', error);
        hideLoading();
        hideDropdown();
      }
    });
  }

  // 検索結果表示
  function displayResults(results) {
    if (results.length === 0) {
      hideDropdown();
      return;
    }

    const html = results.map(result => {
      const typeIcon = getTypeIcon(result.type);
      const typeLabel = getTypeLabel(result.type);
      
      return `
        <div class="autocomplete-item px-3 py-2 hover:bg-primary-50 cursor-pointer border-b border-gray-100 last:border-b-0" 
             data-name="${escapeHtml(result.name)}" 
             data-id="${result.id}">
          <div class="flex items-start space-x-2">
            <div class="flex-shrink-0 w-6 h-6 bg-primary-100 rounded-full flex items-center justify-center">
              <i class="${typeIcon} text-primary text-xs"></i>
            </div>
            <div class="flex-1 min-w-0">
              <div class="text-xs font-medium text-gray-900">
                ${result.search_highlight || escapeHtml(result.display_text)}
              </div>
              <div class="text-xs text-gray-500 mt-0.5">
                ${typeLabel} • ${escapeHtml(result.relationship)}
              </div>
            </div>
          </div>
        </div>
      `;
    }).join('');

    dropdown.innerHTML = html;
    showDropdown();
    
    // クリックイベントの追加
    dropdown.querySelectorAll('.autocomplete-item').forEach(item => {
      item.addEventListener('click', function() {
        const name = this.dataset.name;
        searchInput.value = name;
        hideDropdown();
        form.submit();
      });
    });
  }

  // タイプ別アイコン
  function getTypeIcon(type) {
    switch(type) {
      case 'name': return 'fas fa-user';
      case 'likes': return 'fas fa-thumbs-up';
      case 'memo': return 'fas fa-sticky-note';
      default: return 'fas fa-search';
    }
  }

  // タイプ別ラベル
  function getTypeLabel(type) {
    switch(type) {
      case 'name': return '名前';
      case 'likes': return '好きなもの';
      case 'memo': return 'メモ';
      default: return '検索';
    }
  }

  // HTML エスケープ
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // ローディング表示
  function showLoading() {
    loading.classList.remove('hidden');
  }

  function hideLoading() {
    loading.classList.add('hidden');
  }

  // ドロップダウン表示
  function showDropdown() {
    dropdown.classList.remove('hidden');
  }

  function hideDropdown() {
    dropdown.classList.add('hidden');
  }

    // 外部クリック時にドロップダウンを閉じる
    function handleOutsideClick(e) {
      if (!searchInput.contains(e.target) && !dropdown.contains(e.target)) {
        hideDropdown();
      }
    }
    
    document.addEventListener('click', handleOutsideClick);

  // キーボードナビゲーション
  searchInput.addEventListener('keydown', function(e) {
    const items = dropdown.querySelectorAll('.autocomplete-item');
    const activeItem = dropdown.querySelector('.autocomplete-item.bg-primary-100');
    
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (activeItem) {
        activeItem.classList.remove('bg-primary-100');
        const next = activeItem.nextElementSibling || items[0];
        next.classList.add('bg-primary-100');
      } else if (items.length > 0) {
        items[0].classList.add('bg-primary-100');
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (activeItem) {
        activeItem.classList.remove('bg-primary-100');
        const prev = activeItem.previousElementSibling || items[items.length - 1];
        prev.classList.add('bg-primary-100');
      } else if (items.length > 0) {
        items[items.length - 1].classList.add('bg-primary-100');
      }
    } else if (e.key === 'Enter') {
      if (activeItem) {
        e.preventDefault();
        activeItem.click();
      }
    } else if (e.key === 'Escape') {
      hideDropdown();
    }
  });

    // フィルターの変更時自動検索（オプション）
    // 動的フィルターに変更したため、個別のrelationship selectは削除
  }

  // クリーンアップ関数
  function cleanupAutocomplete() {
    if (currentRequest) {
      currentRequest.abort();
    }
    if (searchTimeout) {
      clearTimeout(searchTimeout);
    }
    
    // data属性をクリア
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.dataset.autocompleteInitialized = 'false';
    }
    
    autocompleteInitialized = false;
  }

  // Turbo対応のイベントリスナー
  document.addEventListener('turbo:load', initializeAutocomplete);
  document.addEventListener('DOMContentLoaded', initializeAutocomplete);
  
  // ページ離脱時のクリーンアップ
  document.addEventListener('turbo:before-visit', cleanupAutocomplete);
  document.addEventListener('beforeunload', cleanupAutocomplete);
})();

// ギフト相手一覧用動的フィルター機能
(function() {
  function initializePeopleDynamicFilter() {
    const filterTypeSelect = document.getElementById('people-filter-type-select');
    const filterTypeHidden = document.getElementById('people-filter-type-hidden');
    const relationshipSelect = document.getElementById('people-relationship-select');
    const eventSelect = document.getElementById('people-event-select');
    const placeholder = document.getElementById('people-filter-placeholder');
    
    if (!filterTypeSelect || !filterTypeHidden || !relationshipSelect || !eventSelect || !placeholder) {
      return;
    }
    
    // 初期状態の設定
    function updateFilterDisplay() {
      const selectedType = filterTypeSelect.value;
      
      // hidden fieldを更新
      filterTypeHidden.value = selectedType;
      
      // すべて非表示にする
      relationshipSelect.style.display = 'none';
      eventSelect.style.display = 'none';
      placeholder.style.display = 'none';
      
      // 選択されたタイプに応じて表示
      if (selectedType === 'relationship') {
        relationshipSelect.style.display = 'block';
        // イベント選択をクリア
        eventSelect.value = '';
      } else if (selectedType === 'event') {
        eventSelect.style.display = 'block';
        // 関係性選択をクリア
        relationshipSelect.value = '';
      } else {
        placeholder.style.display = 'block';
        // 両方クリア
        relationshipSelect.value = '';
        eventSelect.value = '';
      }
    }
    
    // フィルタータイプ変更時の処理
    filterTypeSelect.addEventListener('change', updateFilterDisplay);
    
    // 初期表示の設定
    updateFilterDisplay();
  }
  
  // Turbo対応のイベントリスナー
  document.addEventListener('turbo:load', initializePeopleDynamicFilter);
  document.addEventListener('DOMContentLoaded', initializePeopleDynamicFilter);
})();
</script>
